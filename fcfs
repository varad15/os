#include <stdio.h>
#define MAX_PROCESSES 10
struct Process {
    int pid;
    int arrival;
    int burst;
    int completion;
    int waiting;
};

void fcfs(struct Process processes[], int n) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (currentTime < processes[i].arrival) {
            currentTime = processes[i].arrival;
        }
        processes[i].completion = currentTime + processes[i].burst;
        processes[i].waiting = currentTime - processes[i].arrival; 
        currentTime = processes[i].completion;
    }
}

int main() {
    int n;
    float avgTurnaroundTime = 0;
    float avgWaitingTime = 0;
    struct Process processes[MAX_PROCESSES];
    printf("==========/First Come First Serve Algorithm/===========\n");

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].pid = i + 1;
    }
    fcfs(processes, n);

    for (int i = 0; i < n; i++) {
        avgTurnaroundTime += processes[i].completion - processes[i].arrival;
        avgWaitingTime += processes[i].waiting;
    }
    avgTurnaroundTime /= n;
    avgWaitingTime /= n;

    printf("\nGantt Chart:\n");
    printf(" ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst; j++) {
            printf("--");
        }
        printf(" ");
    }
    printf("\n|");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst - 1; j++) {
            printf(" ");
        }
        printf("P%d", processes[i].pid);
        for (int j = 0; j < processes[i].burst - 1; j++) {
            printf(" ");
        }
        printf("|");
    }
    printf("\n ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst; j++) {
            printf("--");
        }
        printf(" ");
    }
    printf("\n");
        printf("0");
    for (int i = 0; i < n; i++) {
        printf("   %d\t\t", processes[i].completion);
    }
    
    printf("\nFCFS Scheduling:\n");
    printf("PID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival, 
               processes[i].burst, processes[i].completion, 
               processes[i].completion - processes[i].arrival, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);

    return 0;
}
