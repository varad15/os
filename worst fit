#include <stdio.h>

// Function to allocate memory using Worst Fit algorithm
void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n]; // Store block number assigned to a process

    // Initialize all blocks as not allocated
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Iterate through all processes and allocate memory blocks
    for (int i = 0; i < n; i++) {
        // Find the index of the largest block that can accommodate the current process
        int worstFitIndex = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstFitIndex == -1 || blockSize[j] > blockSize[worstFitIndex]) {
                    worstFitIndex = j;
                }
            }
        }
        // If a block is found, allocate memory to the process
        if (worstFitIndex != -1) {
            allocation[i] = worstFitIndex;
            blockSize[worstFitIndex] -= processSize[i];
        }
    }

    // Print memory allocation details
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i, processSize[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i]);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int processSize[] = {212, 417, 112, 426};
    int n = sizeof(processSize) / sizeof(processSize[0]);

    worstFit(blockSize, m, processSize, n);

    return 0;
}
