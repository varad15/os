#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

char buffer[BUFFER_SIZE];
sem_t mutex, full, empty;

void *producer(void *arg);
void *consumer(void *arg);
void insert_item(char item);
char remove_item();

int main() {
   
    sem_init(&mutex, 0, 1);
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);

    
    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    
    sem_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);

    return 0;
}

void *producer(void *arg) {
    for (int i = 0; i < 10; ++i) {
        char item = 'A' + i;
        sem_wait(&empty);  
        sem_wait(&mutex);  
        insert_item(item); 
        sem_post(&mutex);  
        sem_post(&full);   
        printf("Produced:%c\n",item);
        sleep(1);         
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    for (int i = 0; i < 10; ++i) {
        sem_wait(&full);   
        sem_wait(&mutex);
        char item = remove_item(); 
        sem_post(&mutex);  
        sem_post(&empty);  
        printf("Consumed: %c\n", item);
        sleep(1);   
    }
    pthread_exit(NULL);
}

void insert_item(char item) {
    for (int i = 0; i < BUFFER_SIZE; ++i) {
        if (buffer[i] == 0) {
            buffer[i] = item;
            return;
        }
    }
}

char remove_item() {
    char item = buffer[0];
    for (int i = 1; i < BUFFER_SIZE; ++i) {
        buffer[i - 1] = buffer[i];
    }
    buffer[BUFFER_SIZE - 1] = 0;
    return item;
}
